#[cfg(target_os = "windows")]
pub mod windows;
#[cfg(target_os = "windows")]
pub mod windows_k;
#[cfg(target_os = "windows")]
pub use windows_k::Keyboard;
#[cfg(target_os = "linux")]
pub mod linux_k;
#[cfg(target_os = "macos")]
pub mod mac_k;

pub enum Button {
    Left,
    Right,
    Middle,
    Back,
    Forward,
}

impl From<crate::proto_rs::request_master::Button> for Button {
    fn from(value: crate::proto_rs::request_master::Button) -> Self {
        match value {
            crate::proto_rs::request_master::Button::LEFT => Button::Left,
            crate::proto_rs::request_master::Button::RIGHT => Button::Right,
            crate::proto_rs::request_master::Button::MIDDLE => Button::Middle,
            crate::proto_rs::request_master::Button::XBUTTON1 => Button::Back,
            crate::proto_rs::request_master::Button::XBUTTON2 => Button::Forward,
        }
    }
}

/// Key names based on physical location on the device (US Qwerty keyboard layout)
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "serialize", derive(Serialize, Deserialize))]
pub enum JKey {
    Alt,
    AltGr,
    Backspace,
    CapsLock,
    ControlLeft,
    ControlRight,
    Delete,
    DownArrow,
    End,
    Escape,
    F1,
    F10,
    F11,
    F12,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    Home,
    LeftArrow,
    MetaLeft,
    MetaRight,
    PageDown,
    PageUp,
    Return,
    RightArrow,
    ShiftLeft,
    ShiftRight,
    Space,
    Tab,
    UpArrow,
    PrintScreen,
    ScrollLock,
    Pause,
    NumLock,
    BackQuote,
    Num1,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    Num0,
    Minus,
    Equal,
    Q,
    W,
    E,
    R,
    T,
    Y,
    U,
    I,
    O,
    P,
    LeftBracket,
    RightBracket,
    A,
    S,
    D,
    F,
    G,
    H,
    J,
    K,
    L,
    SemiColon,
    Quote,
    BackSlash,
    IntlBackslash,
    Z,
    X,
    C,
    V,
    B,
    N,
    M,
    Comma,
    Dot,
    Slash,
    Insert,
    KpDelete,
    KpReturn,
    KpMinus,
    KpPlus,
    KpMultiply,
    KpDivide,
    Kp0,
    Kp1,
    Kp2,
    Kp3,
    Kp4,
    Kp5,
    Kp6,
    Kp7,
    Kp8,
    Kp9,
    Unknown(u8),
    Application,
    // VolumeMute,
    // VolumeDown,
    // VolumeUp,
    // MediaNextTrack,
    // MediaPrevTrack,
    // MediaStop,
    // MediaPlayPause,
}

impl From<u8> for JKey {
    fn from(value: u8) -> Self {
        use JKey::*;
        match value {
            0x30 => Num0,
            0x31 => Num1,
            0x32 => Num2,
            0x33 => Num3,
            0x34 => Num4,
            0x35 => Num5,
            0x36 => Num6,
            0x37 => Num7,
            0x38 => Num8,
            0x39 => Num9,

            0x41 => A,
            0x42 => B,
            0x43 => C,
            0x44 => D,
            0x45 => E,
            0x46 => F,
            0x47 => G,
            0x48 => H,
            0x49 => I,
            0x4A => J,
            0x4B => K,
            0x4C => L,
            0x4D => M,
            0x4E => N,
            0x4F => O,
            0x50 => P,
            0x51 => Q,
            0x52 => R,
            0x53 => S,
            0x54 => T,
            0x55 => U,
            0x56 => V,
            0x57 => W,
            0x58 => X,
            0x59 => Y,
            0x5A => Z,

            0x70 => F1,
            0x71 => F2,
            0x72 => F3,
            0x73 => F4,
            0x74 => F5,
            0x75 => F6,
            0x76 => F7,
            0x77 => F8,
            0x78 => F9,
            0x79 => F10,
            0x7A => F11,
            0x7B => F12,

            //numpad 0-9, .+-/
            0x60 => Kp0,
            0x61 => Kp1,
            0x62 => Kp2,
            0x63 => Kp3,
            0x64 => Kp4,
            0x65 => Kp5,
            0x66 => Kp6,
            0x67 => Kp7,
            0x68 => Kp8,
            0x69 => Kp9,

            0x6A => KpMultiply,
            0x6B => KpPlus,
            //0x6C VK_SEPARATOR
            0x6D => KpMinus,
            0x6E => KpDelete, //decimal .
            0x6F => KpDivide,
            0x90 => NumLock,

            //navkeys
            0x26 => UpArrow,
            0x25 => LeftArrow,
            0x27 => RightArrow,
            0x28 => DownArrow,

            0x2D => Insert,
            0x23 => End,
            0x2E => Delete, //mac nebo forward delete 0x75
            0x24 => Home,
            0x21 => PageUp,
            0x22 => PageDown,

            0xBA => SemiColon,     //VK_OEM_1),
            0xBB => Equal,         //VK_OEM_PLUS),
            0xBC => Comma,         //VK_OEM_COMMA),
            0xBD => Minus,         //VK_OEM_MINUS),
            0xBE => Dot,           //VK_OEM_PERIOD),
            0xBF => Slash,         //VK_OEM_2), //('/'),
            0xC0 => BackQuote,     //VK_OEM_3), //('~'),
            0xDB => LeftBracket,   //VK_OEM_4), //('['),
            0xDC => BackSlash,     //VK_OEM_5), //('\\'),
            0xDD => RightBracket,  //VK_OEM_6), //(']'),
            0xDE => Quote,         //VK_OEM_7,
            0xE2 => IntlBackslash, //VK_OEM102

            0x2C => PrintScreen,
            0x91 => ScrollLock,
            0x13 => Pause,

            0x1B => Escape,
            0x09 => Tab,
            0x14 => CapsLock,
            0xA0 => ShiftLeft,
            0xA2 => ControlLeft,
            0x5B => MetaLeft,
            0xA4 => Alt, //Alt / Option
            0x20 => Space,
            0xA5 => AltGr, //rightAlt / Option
            0x5D => Application,
            0x5C => MetaRight,
            0xA3 => ControlRight,
            0xA1 => ShiftRight,
            0x0D => Return,
            0x08 => Backspace,

            //VIRTUAL KEYS
            // 0xAD => VolumeMute,
            // 0xAE => VolumeDown,
            // 0xAF => VolumeUp,
            // 0xB0 => MediaNextTrack,
            // 0xB1 => MediaPrevTrack,
            // 0xB2 => MediaStop,
            // 0xB3 => MediaPlayPause,

            //Unassigned
            0x0A => KpReturn,

            code => Unknown(code),
        }
    }
}
