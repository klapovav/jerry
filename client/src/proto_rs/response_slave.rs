// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `response_slave.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct SlaveMessage {
    // message oneof groups
    pub response: ::std::option::Option<SlaveMessage_oneof_response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SlaveMessage {
    fn default() -> &'a SlaveMessage {
        <SlaveMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SlaveMessage_oneof_response {
    init_info(ClientInfo),
    cursor(Position),
    clipboard_session(super::clipboard::Clipboard),
    no_response(Failure),
}

impl SlaveMessage {
    pub fn new() -> SlaveMessage {
        ::std::default::Default::default()
    }

    // .slave.ClientInfo init_info = 1;


    pub fn get_init_info(&self) -> &ClientInfo {
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::init_info(ref v)) => v,
            _ => <ClientInfo as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_init_info(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_init_info(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::init_info(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_init_info(&mut self, v: ClientInfo) {
        self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::init_info(v))
    }

    // Mutable pointer to the field.
    pub fn mut_init_info(&mut self) -> &mut ClientInfo {
        if let ::std::option::Option::Some(SlaveMessage_oneof_response::init_info(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::init_info(ClientInfo::new()));
        }
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::init_info(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_init_info(&mut self) -> ClientInfo {
        if self.has_init_info() {
            match self.response.take() {
                ::std::option::Option::Some(SlaveMessage_oneof_response::init_info(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientInfo::new()
        }
    }

    // .slave.Position cursor = 2;


    pub fn get_cursor(&self) -> &Position {
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::cursor(ref v)) => v,
            _ => <Position as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cursor(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_cursor(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::cursor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cursor(&mut self, v: Position) {
        self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::cursor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cursor(&mut self) -> &mut Position {
        if let ::std::option::Option::Some(SlaveMessage_oneof_response::cursor(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::cursor(Position::new()));
        }
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::cursor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cursor(&mut self) -> Position {
        if self.has_cursor() {
            match self.response.take() {
                ::std::option::Option::Some(SlaveMessage_oneof_response::cursor(v)) => v,
                _ => panic!(),
            }
        } else {
            Position::new()
        }
    }

    // .common.Clipboard clipboard_session = 3;


    pub fn get_clipboard_session(&self) -> &super::clipboard::Clipboard {
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::clipboard_session(ref v)) => v,
            _ => <super::clipboard::Clipboard as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_clipboard_session(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_clipboard_session(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::clipboard_session(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_clipboard_session(&mut self, v: super::clipboard::Clipboard) {
        self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::clipboard_session(v))
    }

    // Mutable pointer to the field.
    pub fn mut_clipboard_session(&mut self) -> &mut super::clipboard::Clipboard {
        if let ::std::option::Option::Some(SlaveMessage_oneof_response::clipboard_session(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::clipboard_session(super::clipboard::Clipboard::new()));
        }
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::clipboard_session(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_clipboard_session(&mut self) -> super::clipboard::Clipboard {
        if self.has_clipboard_session() {
            match self.response.take() {
                ::std::option::Option::Some(SlaveMessage_oneof_response::clipboard_session(v)) => v,
                _ => panic!(),
            }
        } else {
            super::clipboard::Clipboard::new()
        }
    }

    // .slave.Failure no_response = 4;


    pub fn get_no_response(&self) -> &Failure {
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::no_response(ref v)) => v,
            _ => <Failure as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_no_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_no_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::no_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_no_response(&mut self, v: Failure) {
        self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::no_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_no_response(&mut self) -> &mut Failure {
        if let ::std::option::Option::Some(SlaveMessage_oneof_response::no_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::no_response(Failure::new()));
        }
        match self.response {
            ::std::option::Option::Some(SlaveMessage_oneof_response::no_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_no_response(&mut self) -> Failure {
        if self.has_no_response() {
            match self.response.take() {
                ::std::option::Option::Some(SlaveMessage_oneof_response::no_response(v)) => v,
                _ => panic!(),
            }
        } else {
            Failure::new()
        }
    }
}

impl ::protobuf::Message for SlaveMessage {
    fn is_initialized(&self) -> bool {
        if let Some(SlaveMessage_oneof_response::init_info(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SlaveMessage_oneof_response::cursor(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SlaveMessage_oneof_response::clipboard_session(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SlaveMessage_oneof_response::no_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::init_info(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::cursor(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::clipboard_session(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SlaveMessage_oneof_response::no_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &SlaveMessage_oneof_response::init_info(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SlaveMessage_oneof_response::cursor(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SlaveMessage_oneof_response::clipboard_session(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SlaveMessage_oneof_response::no_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &SlaveMessage_oneof_response::init_info(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SlaveMessage_oneof_response::cursor(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SlaveMessage_oneof_response::clipboard_session(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SlaveMessage_oneof_response::no_response(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SlaveMessage {
        SlaveMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ClientInfo>(
                "init_info",
                SlaveMessage::has_init_info,
                SlaveMessage::get_init_info,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Position>(
                "cursor",
                SlaveMessage::has_cursor,
                SlaveMessage::get_cursor,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::clipboard::Clipboard>(
                "clipboard_session",
                SlaveMessage::has_clipboard_session,
                SlaveMessage::get_clipboard_session,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Failure>(
                "no_response",
                SlaveMessage::has_no_response,
                SlaveMessage::get_no_response,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SlaveMessage>(
                "SlaveMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SlaveMessage {
        static instance: ::protobuf::rt::LazyV2<SlaveMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SlaveMessage::new)
    }
}

impl ::protobuf::Clear for SlaveMessage {
    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SlaveMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SlaveMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Failure {
    // message fields
    pub Reason: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Failure {
    fn default() -> &'a Failure {
        <Failure as ::protobuf::Message>::default_instance()
    }
}

impl Failure {
    pub fn new() -> Failure {
        ::std::default::Default::default()
    }

    // string Reason = 1;


    pub fn get_Reason(&self) -> &str {
        &self.Reason
    }
    pub fn clear_Reason(&mut self) {
        self.Reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_Reason(&mut self, v: ::std::string::String) {
        self.Reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Reason(&mut self) -> &mut ::std::string::String {
        &mut self.Reason
    }

    // Take field
    pub fn take_Reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Reason, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Failure {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Reason)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Reason.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Reason.is_empty() {
            os.write_string(1, &self.Reason)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Failure {
        Failure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Reason",
                |m: &Failure| { &m.Reason },
                |m: &mut Failure| { &mut m.Reason },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Failure>(
                "Failure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Failure {
        static instance: ::protobuf::rt::LazyV2<Failure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Failure::new)
    }
}

impl ::protobuf::Clear for Failure {
    fn clear(&mut self) {
        self.Reason.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Failure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Failure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientInfo {
    // message fields
    pub Width: i32,
    pub Height: i32,
    pub Cursor: ::protobuf::SingularPtrField<Position>,
    pub Password: ::std::string::String,
    pub Guid: ::protobuf::SingularPtrField<ClientInfo_UUID>,
    pub Name: ::std::string::String,
    pub System: ClientInfo_OS,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientInfo {
    fn default() -> &'a ClientInfo {
        <ClientInfo as ::protobuf::Message>::default_instance()
    }
}

impl ClientInfo {
    pub fn new() -> ClientInfo {
        ::std::default::Default::default()
    }

    // int32 Width = 1;


    pub fn get_Width(&self) -> i32 {
        self.Width
    }
    pub fn clear_Width(&mut self) {
        self.Width = 0;
    }

    // Param is passed by value, moved
    pub fn set_Width(&mut self, v: i32) {
        self.Width = v;
    }

    // int32 Height = 2;


    pub fn get_Height(&self) -> i32 {
        self.Height
    }
    pub fn clear_Height(&mut self) {
        self.Height = 0;
    }

    // Param is passed by value, moved
    pub fn set_Height(&mut self, v: i32) {
        self.Height = v;
    }

    // .slave.Position Cursor = 6;


    pub fn get_Cursor(&self) -> &Position {
        self.Cursor.as_ref().unwrap_or_else(|| <Position as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Cursor(&mut self) {
        self.Cursor.clear();
    }

    pub fn has_Cursor(&self) -> bool {
        self.Cursor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Cursor(&mut self, v: Position) {
        self.Cursor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Cursor(&mut self) -> &mut Position {
        if self.Cursor.is_none() {
            self.Cursor.set_default();
        }
        self.Cursor.as_mut().unwrap()
    }

    // Take field
    pub fn take_Cursor(&mut self) -> Position {
        self.Cursor.take().unwrap_or_else(|| Position::new())
    }

    // string Password = 7;


    pub fn get_Password(&self) -> &str {
        &self.Password
    }
    pub fn clear_Password(&mut self) {
        self.Password.clear();
    }

    // Param is passed by value, moved
    pub fn set_Password(&mut self, v: ::std::string::String) {
        self.Password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Password(&mut self) -> &mut ::std::string::String {
        &mut self.Password
    }

    // Take field
    pub fn take_Password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Password, ::std::string::String::new())
    }

    // .slave.ClientInfo.UUID Guid = 5;


    pub fn get_Guid(&self) -> &ClientInfo_UUID {
        self.Guid.as_ref().unwrap_or_else(|| <ClientInfo_UUID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_Guid(&mut self) {
        self.Guid.clear();
    }

    pub fn has_Guid(&self) -> bool {
        self.Guid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Guid(&mut self, v: ClientInfo_UUID) {
        self.Guid = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Guid(&mut self) -> &mut ClientInfo_UUID {
        if self.Guid.is_none() {
            self.Guid.set_default();
        }
        self.Guid.as_mut().unwrap()
    }

    // Take field
    pub fn take_Guid(&mut self) -> ClientInfo_UUID {
        self.Guid.take().unwrap_or_else(|| ClientInfo_UUID::new())
    }

    // string Name = 3;


    pub fn get_Name(&self) -> &str {
        &self.Name
    }
    pub fn clear_Name(&mut self) {
        self.Name.clear();
    }

    // Param is passed by value, moved
    pub fn set_Name(&mut self, v: ::std::string::String) {
        self.Name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Name(&mut self) -> &mut ::std::string::String {
        &mut self.Name
    }

    // Take field
    pub fn take_Name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Name, ::std::string::String::new())
    }

    // .slave.ClientInfo.OS System = 4;


    pub fn get_System(&self) -> ClientInfo_OS {
        self.System
    }
    pub fn clear_System(&mut self) {
        self.System = ClientInfo_OS::WINDOWS;
    }

    // Param is passed by value, moved
    pub fn set_System(&mut self, v: ClientInfo_OS) {
        self.System = v;
    }
}

impl ::protobuf::Message for ClientInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.Cursor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Guid {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.Width = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.Height = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Cursor)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Password)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Guid)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Name)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.System, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.Width != 0 {
            my_size += ::protobuf::rt::value_size(1, self.Width, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.Height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.Height, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.Cursor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.Password.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.Password);
        }
        if let Some(ref v) = self.Guid.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.Name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.Name);
        }
        if self.System != ClientInfo_OS::WINDOWS {
            my_size += ::protobuf::rt::enum_size(4, self.System);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.Width != 0 {
            os.write_int32(1, self.Width)?;
        }
        if self.Height != 0 {
            os.write_int32(2, self.Height)?;
        }
        if let Some(ref v) = self.Cursor.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.Password.is_empty() {
            os.write_string(7, &self.Password)?;
        }
        if let Some(ref v) = self.Guid.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.Name.is_empty() {
            os.write_string(3, &self.Name)?;
        }
        if self.System != ClientInfo_OS::WINDOWS {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.System))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientInfo {
        ClientInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "Width",
                |m: &ClientInfo| { &m.Width },
                |m: &mut ClientInfo| { &mut m.Width },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "Height",
                |m: &ClientInfo| { &m.Height },
                |m: &mut ClientInfo| { &mut m.Height },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Position>>(
                "Cursor",
                |m: &ClientInfo| { &m.Cursor },
                |m: &mut ClientInfo| { &mut m.Cursor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Password",
                |m: &ClientInfo| { &m.Password },
                |m: &mut ClientInfo| { &mut m.Password },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientInfo_UUID>>(
                "Guid",
                |m: &ClientInfo| { &m.Guid },
                |m: &mut ClientInfo| { &mut m.Guid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "Name",
                |m: &ClientInfo| { &m.Name },
                |m: &mut ClientInfo| { &mut m.Name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientInfo_OS>>(
                "System",
                |m: &ClientInfo| { &m.System },
                |m: &mut ClientInfo| { &mut m.System },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientInfo>(
                "ClientInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientInfo {
        static instance: ::protobuf::rt::LazyV2<ClientInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientInfo::new)
    }
}

impl ::protobuf::Clear for ClientInfo {
    fn clear(&mut self) {
        self.Width = 0;
        self.Height = 0;
        self.Cursor.clear();
        self.Password.clear();
        self.Guid.clear();
        self.Name.clear();
        self.System = ClientInfo_OS::WINDOWS;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientInfo_UUID {
    // message fields
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientInfo_UUID {
    fn default() -> &'a ClientInfo_UUID {
        <ClientInfo_UUID as ::protobuf::Message>::default_instance()
    }
}

impl ClientInfo_UUID {
    pub fn new() -> ClientInfo_UUID {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ClientInfo_UUID {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientInfo_UUID {
        ClientInfo_UUID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &ClientInfo_UUID| { &m.value },
                |m: &mut ClientInfo_UUID| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientInfo_UUID>(
                "ClientInfo.UUID",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientInfo_UUID {
        static instance: ::protobuf::rt::LazyV2<ClientInfo_UUID> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientInfo_UUID::new)
    }
}

impl ::protobuf::Clear for ClientInfo_UUID {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientInfo_UUID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientInfo_UUID {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientInfo_OS {
    WINDOWS = 0,
    LINUX = 1,
    MAC = 2,
}

impl ::protobuf::ProtobufEnum for ClientInfo_OS {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientInfo_OS> {
        match value {
            0 => ::std::option::Option::Some(ClientInfo_OS::WINDOWS),
            1 => ::std::option::Option::Some(ClientInfo_OS::LINUX),
            2 => ::std::option::Option::Some(ClientInfo_OS::MAC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientInfo_OS] = &[
            ClientInfo_OS::WINDOWS,
            ClientInfo_OS::LINUX,
            ClientInfo_OS::MAC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientInfo_OS>("ClientInfo.OS", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientInfo_OS {
}

impl ::std::default::Default for ClientInfo_OS {
    fn default() -> Self {
        ClientInfo_OS::WINDOWS
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientInfo_OS {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Position {
    // message fields
    pub x: i32,
    pub y: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Position {
    fn default() -> &'a Position {
        <Position as ::protobuf::Message>::default_instance()
    }
}

impl Position {
    pub fn new() -> Position {
        ::std::default::Default::default()
    }

    // int32 x = 1;


    pub fn get_x(&self) -> i32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = v;
    }

    // int32 y = 2;


    pub fn get_y(&self) -> i32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = v;
    }
}

impl ::protobuf::Message for Position {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::value_size(1, self.x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_size(2, self.y, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0 {
            os.write_int32(1, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(2, self.y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Position {
        Position::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "x",
                |m: &Position| { &m.x },
                |m: &mut Position| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "y",
                |m: &Position| { &m.y },
                |m: &mut Position| { &mut m.y },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Position>(
                "Position",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Position {
        static instance: ::protobuf::rt::LazyV2<Position> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Position::new)
    }
}

impl ::protobuf::Clear for Position {
    fn clear(&mut self) {
        self.x = 0;
        self.y = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Position {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Position {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14response_slave.proto\x12\x05slave\x1a\x0fclipboard.proto\"\xec\x01\
    \n\x0cSlaveMessage\x120\n\tinit_info\x18\x01\x20\x01(\x0b2\x11.slave.Cli\
    entInfoH\0R\x08initInfo\x12)\n\x06cursor\x18\x02\x20\x01(\x0b2\x0f.slave\
    .PositionH\0R\x06cursor\x12@\n\x11clipboard_session\x18\x03\x20\x01(\x0b\
    2\x11.common.ClipboardH\0R\x10clipboardSession\x121\n\x0bno_response\x18\
    \x04\x20\x01(\x0b2\x0e.slave.FailureH\0R\nnoResponseB\n\n\x08response\"!\
    \n\x07Failure\x12\x16\n\x06Reason\x18\x01\x20\x01(\tR\x06Reason\"\xb2\
    \x02\n\nClientInfo\x12\x14\n\x05Width\x18\x01\x20\x01(\x05R\x05Width\x12\
    \x16\n\x06Height\x18\x02\x20\x01(\x05R\x06Height\x12'\n\x06Cursor\x18\
    \x06\x20\x01(\x0b2\x0f.slave.PositionR\x06Cursor\x12\x1a\n\x08Password\
    \x18\x07\x20\x01(\tR\x08Password\x12*\n\x04Guid\x18\x05\x20\x01(\x0b2\
    \x16.slave.ClientInfo.UUIDR\x04Guid\x12\x12\n\x04Name\x18\x03\x20\x01(\t\
    R\x04Name\x12,\n\x06System\x18\x04\x20\x01(\x0e2\x14.slave.ClientInfo.OS\
    R\x06System\x1a\x1c\n\x04UUID\x12\x14\n\x05value\x18\x01\x20\x01(\tR\x05\
    value\"%\n\x02OS\x12\x0b\n\x07WINDOWS\x10\0\x12\t\n\x05LINUX\x10\x01\x12\
    \x07\n\x03MAC\x10\x02\"&\n\x08Position\x12\x0c\n\x01x\x18\x01\x20\x01(\
    \x05R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x05R\x01yb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
