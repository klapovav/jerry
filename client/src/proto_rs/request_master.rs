// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `request_master.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct MasterMessage {
    // message fields
    pub rndB: ::std::string::String,
    pub rndE: ::std::string::String,
    // message oneof groups
    pub action: ::std::option::Option<MasterMessage_oneof_action>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MasterMessage {
    fn default() -> &'a MasterMessage {
        <MasterMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum MasterMessage_oneof_action {
    mouse_position(MouseMove),
    keyboard(Keyboard),
    mouse_click(MouseClick),
    mouse_wheel(MouseWheel),
    clipboard(super::clipboard::Clipboard),
    start_session(SessionBegin),
    end_session(SessionEnd),
    request(Request),
    handshake(Echo),
    heartbeat(Heartbeat),
}

impl MasterMessage {
    pub fn new() -> MasterMessage {
        ::std::default::Default::default()
    }

    // string rndB = 1;


    pub fn get_rndB(&self) -> &str {
        &self.rndB
    }
    pub fn clear_rndB(&mut self) {
        self.rndB.clear();
    }

    // Param is passed by value, moved
    pub fn set_rndB(&mut self, v: ::std::string::String) {
        self.rndB = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rndB(&mut self) -> &mut ::std::string::String {
        &mut self.rndB
    }

    // Take field
    pub fn take_rndB(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rndB, ::std::string::String::new())
    }

    // .master.MouseMove mouse_position = 11;


    pub fn get_mouse_position(&self) -> &MouseMove {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_position(ref v)) => v,
            _ => <MouseMove as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_mouse_position(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_mouse_position(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_position(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mouse_position(&mut self, v: MouseMove) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_position(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mouse_position(&mut self) -> &mut MouseMove {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::mouse_position(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_position(MouseMove::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_position(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mouse_position(&mut self) -> MouseMove {
        if self.has_mouse_position() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::mouse_position(v)) => v,
                _ => panic!(),
            }
        } else {
            MouseMove::new()
        }
    }

    // .master.Keyboard keyboard = 2;


    pub fn get_keyboard(&self) -> &Keyboard {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::keyboard(ref v)) => v,
            _ => <Keyboard as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_keyboard(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_keyboard(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::keyboard(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_keyboard(&mut self, v: Keyboard) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::keyboard(v))
    }

    // Mutable pointer to the field.
    pub fn mut_keyboard(&mut self) -> &mut Keyboard {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::keyboard(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::keyboard(Keyboard::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::keyboard(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_keyboard(&mut self) -> Keyboard {
        if self.has_keyboard() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::keyboard(v)) => v,
                _ => panic!(),
            }
        } else {
            Keyboard::new()
        }
    }

    // .master.MouseClick mouse_click = 3;


    pub fn get_mouse_click(&self) -> &MouseClick {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_click(ref v)) => v,
            _ => <MouseClick as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_mouse_click(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_mouse_click(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_click(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mouse_click(&mut self, v: MouseClick) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_click(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mouse_click(&mut self) -> &mut MouseClick {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::mouse_click(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_click(MouseClick::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_click(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mouse_click(&mut self) -> MouseClick {
        if self.has_mouse_click() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::mouse_click(v)) => v,
                _ => panic!(),
            }
        } else {
            MouseClick::new()
        }
    }

    // .master.MouseWheel mouse_wheel = 8;


    pub fn get_mouse_wheel(&self) -> &MouseWheel {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_wheel(ref v)) => v,
            _ => <MouseWheel as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_mouse_wheel(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_mouse_wheel(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_wheel(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mouse_wheel(&mut self, v: MouseWheel) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_wheel(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mouse_wheel(&mut self) -> &mut MouseWheel {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::mouse_wheel(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_wheel(MouseWheel::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::mouse_wheel(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mouse_wheel(&mut self) -> MouseWheel {
        if self.has_mouse_wheel() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::mouse_wheel(v)) => v,
                _ => panic!(),
            }
        } else {
            MouseWheel::new()
        }
    }

    // .common.Clipboard clipboard = 4;


    pub fn get_clipboard(&self) -> &super::clipboard::Clipboard {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::clipboard(ref v)) => v,
            _ => <super::clipboard::Clipboard as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_clipboard(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_clipboard(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::clipboard(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_clipboard(&mut self, v: super::clipboard::Clipboard) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::clipboard(v))
    }

    // Mutable pointer to the field.
    pub fn mut_clipboard(&mut self) -> &mut super::clipboard::Clipboard {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::clipboard(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::clipboard(super::clipboard::Clipboard::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::clipboard(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_clipboard(&mut self) -> super::clipboard::Clipboard {
        if self.has_clipboard() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::clipboard(v)) => v,
                _ => panic!(),
            }
        } else {
            super::clipboard::Clipboard::new()
        }
    }

    // .master.SessionBegin start_session = 5;


    pub fn get_start_session(&self) -> &SessionBegin {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::start_session(ref v)) => v,
            _ => <SessionBegin as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_start_session(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_start_session(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::start_session(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_start_session(&mut self, v: SessionBegin) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::start_session(v))
    }

    // Mutable pointer to the field.
    pub fn mut_start_session(&mut self) -> &mut SessionBegin {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::start_session(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::start_session(SessionBegin::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::start_session(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_start_session(&mut self) -> SessionBegin {
        if self.has_start_session() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::start_session(v)) => v,
                _ => panic!(),
            }
        } else {
            SessionBegin::new()
        }
    }

    // .master.SessionEnd end_session = 6;


    pub fn get_end_session(&self) -> &SessionEnd {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::end_session(ref v)) => v,
            _ => <SessionEnd as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_end_session(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_end_session(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::end_session(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_end_session(&mut self, v: SessionEnd) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::end_session(v))
    }

    // Mutable pointer to the field.
    pub fn mut_end_session(&mut self) -> &mut SessionEnd {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::end_session(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::end_session(SessionEnd::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::end_session(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_end_session(&mut self) -> SessionEnd {
        if self.has_end_session() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::end_session(v)) => v,
                _ => panic!(),
            }
        } else {
            SessionEnd::new()
        }
    }

    // .master.Request request = 7;


    pub fn get_request(&self) -> Request {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::request(v)) => v,
            _ => Request::INIT_INFO,
        }
    }
    pub fn clear_request(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: Request) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::request(v))
    }

    // .master.Echo handshake = 9;


    pub fn get_handshake(&self) -> &Echo {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::handshake(ref v)) => v,
            _ => <Echo as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_handshake(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_handshake(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::handshake(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_handshake(&mut self, v: Echo) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::handshake(v))
    }

    // Mutable pointer to the field.
    pub fn mut_handshake(&mut self) -> &mut Echo {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::handshake(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::handshake(Echo::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::handshake(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_handshake(&mut self) -> Echo {
        if self.has_handshake() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::handshake(v)) => v,
                _ => panic!(),
            }
        } else {
            Echo::new()
        }
    }

    // .master.Heartbeat heartbeat = 10;


    pub fn get_heartbeat(&self) -> &Heartbeat {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::heartbeat(ref v)) => v,
            _ => <Heartbeat as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_heartbeat(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_heartbeat(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::heartbeat(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_heartbeat(&mut self, v: Heartbeat) {
        self.action = ::std::option::Option::Some(MasterMessage_oneof_action::heartbeat(v))
    }

    // Mutable pointer to the field.
    pub fn mut_heartbeat(&mut self) -> &mut Heartbeat {
        if let ::std::option::Option::Some(MasterMessage_oneof_action::heartbeat(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(MasterMessage_oneof_action::heartbeat(Heartbeat::new()));
        }
        match self.action {
            ::std::option::Option::Some(MasterMessage_oneof_action::heartbeat(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_heartbeat(&mut self) -> Heartbeat {
        if self.has_heartbeat() {
            match self.action.take() {
                ::std::option::Option::Some(MasterMessage_oneof_action::heartbeat(v)) => v,
                _ => panic!(),
            }
        } else {
            Heartbeat::new()
        }
    }

    // string rndE = 12;


    pub fn get_rndE(&self) -> &str {
        &self.rndE
    }
    pub fn clear_rndE(&mut self) {
        self.rndE.clear();
    }

    // Param is passed by value, moved
    pub fn set_rndE(&mut self, v: ::std::string::String) {
        self.rndE = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rndE(&mut self) -> &mut ::std::string::String {
        &mut self.rndE
    }

    // Take field
    pub fn take_rndE(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rndE, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MasterMessage {
    fn is_initialized(&self) -> bool {
        if let Some(MasterMessage_oneof_action::mouse_position(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterMessage_oneof_action::keyboard(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterMessage_oneof_action::mouse_click(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterMessage_oneof_action::mouse_wheel(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterMessage_oneof_action::clipboard(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterMessage_oneof_action::start_session(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterMessage_oneof_action::end_session(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterMessage_oneof_action::handshake(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MasterMessage_oneof_action::heartbeat(ref v)) = self.action {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rndB)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_position(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::keyboard(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_click(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::mouse_wheel(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::clipboard(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::start_session(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::end_session(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::request(is.read_enum()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::handshake(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.action = ::std::option::Option::Some(MasterMessage_oneof_action::heartbeat(is.read_message()?));
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rndE)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rndB.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rndB);
        }
        if !self.rndE.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.rndE);
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &MasterMessage_oneof_action::mouse_position(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterMessage_oneof_action::keyboard(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterMessage_oneof_action::mouse_click(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterMessage_oneof_action::mouse_wheel(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterMessage_oneof_action::clipboard(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterMessage_oneof_action::start_session(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterMessage_oneof_action::end_session(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterMessage_oneof_action::request(v) => {
                    my_size += ::protobuf::rt::enum_size(7, v);
                },
                &MasterMessage_oneof_action::handshake(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MasterMessage_oneof_action::heartbeat(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.rndB.is_empty() {
            os.write_string(1, &self.rndB)?;
        }
        if !self.rndE.is_empty() {
            os.write_string(12, &self.rndE)?;
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &MasterMessage_oneof_action::mouse_position(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterMessage_oneof_action::keyboard(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterMessage_oneof_action::mouse_click(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterMessage_oneof_action::mouse_wheel(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterMessage_oneof_action::clipboard(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterMessage_oneof_action::start_session(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterMessage_oneof_action::end_session(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterMessage_oneof_action::request(v) => {
                    os.write_enum(7, ::protobuf::ProtobufEnum::value(&v))?;
                },
                &MasterMessage_oneof_action::handshake(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MasterMessage_oneof_action::heartbeat(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MasterMessage {
        MasterMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rndB",
                |m: &MasterMessage| { &m.rndB },
                |m: &mut MasterMessage| { &mut m.rndB },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MouseMove>(
                "mouse_position",
                MasterMessage::has_mouse_position,
                MasterMessage::get_mouse_position,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Keyboard>(
                "keyboard",
                MasterMessage::has_keyboard,
                MasterMessage::get_keyboard,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MouseClick>(
                "mouse_click",
                MasterMessage::has_mouse_click,
                MasterMessage::get_mouse_click,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MouseWheel>(
                "mouse_wheel",
                MasterMessage::has_mouse_wheel,
                MasterMessage::get_mouse_wheel,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::clipboard::Clipboard>(
                "clipboard",
                MasterMessage::has_clipboard,
                MasterMessage::get_clipboard,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SessionBegin>(
                "start_session",
                MasterMessage::has_start_session,
                MasterMessage::get_start_session,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SessionEnd>(
                "end_session",
                MasterMessage::has_end_session,
                MasterMessage::get_end_session,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, Request>(
                "request",
                MasterMessage::has_request,
                MasterMessage::get_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Echo>(
                "handshake",
                MasterMessage::has_handshake,
                MasterMessage::get_handshake,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Heartbeat>(
                "heartbeat",
                MasterMessage::has_heartbeat,
                MasterMessage::get_heartbeat,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rndE",
                |m: &MasterMessage| { &m.rndE },
                |m: &mut MasterMessage| { &mut m.rndE },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MasterMessage>(
                "MasterMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MasterMessage {
        static instance: ::protobuf::rt::LazyV2<MasterMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MasterMessage::new)
    }
}

impl ::protobuf::Clear for MasterMessage {
    fn clear(&mut self) {
        self.rndB.clear();
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.rndE.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MasterMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MasterMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Echo {
    // message fields
    pub result: HandshakeResult,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Echo {
    fn default() -> &'a Echo {
        <Echo as ::protobuf::Message>::default_instance()
    }
}

impl Echo {
    pub fn new() -> Echo {
        ::std::default::Default::default()
    }

    // .master.HandshakeResult result = 1;


    pub fn get_result(&self) -> HandshakeResult {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = HandshakeResult::Success;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: HandshakeResult) {
        self.result = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Echo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != HandshakeResult::Success {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != HandshakeResult::Success {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.result))?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Echo {
        Echo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HandshakeResult>>(
                "result",
                |m: &Echo| { &m.result },
                |m: &mut Echo| { &mut m.result },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &Echo| { &m.message },
                |m: &mut Echo| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Echo>(
                "Echo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Echo {
        static instance: ::protobuf::rt::LazyV2<Echo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Echo::new)
    }
}

impl ::protobuf::Clear for Echo {
    fn clear(&mut self) {
        self.result = HandshakeResult::Success;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Echo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Echo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Heartbeat {
    // message fields
    pub one_way: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Heartbeat {
    fn default() -> &'a Heartbeat {
        <Heartbeat as ::protobuf::Message>::default_instance()
    }
}

impl Heartbeat {
    pub fn new() -> Heartbeat {
        ::std::default::Default::default()
    }

    // bool one_way = 1;


    pub fn get_one_way(&self) -> bool {
        self.one_way
    }
    pub fn clear_one_way(&mut self) {
        self.one_way = false;
    }

    // Param is passed by value, moved
    pub fn set_one_way(&mut self, v: bool) {
        self.one_way = v;
    }
}

impl ::protobuf::Message for Heartbeat {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.one_way = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.one_way != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.one_way != false {
            os.write_bool(1, self.one_way)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Heartbeat {
        Heartbeat::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "one_way",
                |m: &Heartbeat| { &m.one_way },
                |m: &mut Heartbeat| { &mut m.one_way },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Heartbeat>(
                "Heartbeat",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Heartbeat {
        static instance: ::protobuf::rt::LazyV2<Heartbeat> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Heartbeat::new)
    }
}

impl ::protobuf::Clear for Heartbeat {
    fn clear(&mut self) {
        self.one_way = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Heartbeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Heartbeat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionBegin {
    // message fields
    pub mouse_move_relative: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionBegin {
    fn default() -> &'a SessionBegin {
        <SessionBegin as ::protobuf::Message>::default_instance()
    }
}

impl SessionBegin {
    pub fn new() -> SessionBegin {
        ::std::default::Default::default()
    }

    // bool mouse_move_relative = 1;


    pub fn get_mouse_move_relative(&self) -> bool {
        self.mouse_move_relative
    }
    pub fn clear_mouse_move_relative(&mut self) {
        self.mouse_move_relative = false;
    }

    // Param is passed by value, moved
    pub fn set_mouse_move_relative(&mut self, v: bool) {
        self.mouse_move_relative = v;
    }
}

impl ::protobuf::Message for SessionBegin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.mouse_move_relative = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mouse_move_relative != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.mouse_move_relative != false {
            os.write_bool(1, self.mouse_move_relative)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionBegin {
        SessionBegin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "mouse_move_relative",
                |m: &SessionBegin| { &m.mouse_move_relative },
                |m: &mut SessionBegin| { &mut m.mouse_move_relative },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionBegin>(
                "SessionBegin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionBegin {
        static instance: ::protobuf::rt::LazyV2<SessionBegin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionBegin::new)
    }
}

impl ::protobuf::Clear for SessionBegin {
    fn clear(&mut self) {
        self.mouse_move_relative = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionBegin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionBegin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionEnd {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionEnd {
    fn default() -> &'a SessionEnd {
        <SessionEnd as ::protobuf::Message>::default_instance()
    }
}

impl SessionEnd {
    pub fn new() -> SessionEnd {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SessionEnd {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionEnd {
        SessionEnd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionEnd>(
                "SessionEnd",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionEnd {
        static instance: ::protobuf::rt::LazyV2<SessionEnd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionEnd::new)
    }
}

impl ::protobuf::Clear for SessionEnd {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionEnd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionEnd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Keyboard {
    // message fields
    pub key: u32,
    pub event_type: State,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Keyboard {
    fn default() -> &'a Keyboard {
        <Keyboard as ::protobuf::Message>::default_instance()
    }
}

impl Keyboard {
    pub fn new() -> Keyboard {
        ::std::default::Default::default()
    }

    // uint32 key = 1;


    pub fn get_key(&self) -> u32 {
        self.key
    }
    pub fn clear_key(&mut self) {
        self.key = 0;
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: u32) {
        self.key = v;
    }

    // .master.State event_type = 2;


    pub fn get_event_type(&self) -> State {
        self.event_type
    }
    pub fn clear_event_type(&mut self) {
        self.event_type = State::PRESSED;
    }

    // Param is passed by value, moved
    pub fn set_event_type(&mut self, v: State) {
        self.event_type = v;
    }
}

impl ::protobuf::Message for Keyboard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.key = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::value_size(1, self.key, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event_type != State::PRESSED {
            my_size += ::protobuf::rt::enum_size(2, self.event_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.key != 0 {
            os.write_uint32(1, self.key)?;
        }
        if self.event_type != State::PRESSED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.event_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Keyboard {
        Keyboard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "key",
                |m: &Keyboard| { &m.key },
                |m: &mut Keyboard| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                "event_type",
                |m: &Keyboard| { &m.event_type },
                |m: &mut Keyboard| { &mut m.event_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Keyboard>(
                "Keyboard",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Keyboard {
        static instance: ::protobuf::rt::LazyV2<Keyboard> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Keyboard::new)
    }
}

impl ::protobuf::Clear for Keyboard {
    fn clear(&mut self) {
        self.key = 0;
        self.event_type = State::PRESSED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Keyboard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Keyboard {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MouseMove {
    // message fields
    pub X: i32,
    pub Y: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MouseMove {
    fn default() -> &'a MouseMove {
        <MouseMove as ::protobuf::Message>::default_instance()
    }
}

impl MouseMove {
    pub fn new() -> MouseMove {
        ::std::default::Default::default()
    }

    // int32 X = 1;


    pub fn get_X(&self) -> i32 {
        self.X
    }
    pub fn clear_X(&mut self) {
        self.X = 0;
    }

    // Param is passed by value, moved
    pub fn set_X(&mut self, v: i32) {
        self.X = v;
    }

    // int32 Y = 2;


    pub fn get_Y(&self) -> i32 {
        self.Y
    }
    pub fn clear_Y(&mut self) {
        self.Y = 0;
    }

    // Param is passed by value, moved
    pub fn set_Y(&mut self, v: i32) {
        self.Y = v;
    }
}

impl ::protobuf::Message for MouseMove {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.X = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.Y = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.X != 0 {
            my_size += ::protobuf::rt::value_size(1, self.X, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.Y != 0 {
            my_size += ::protobuf::rt::value_size(2, self.Y, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.X != 0 {
            os.write_int32(1, self.X)?;
        }
        if self.Y != 0 {
            os.write_int32(2, self.Y)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MouseMove {
        MouseMove::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "X",
                |m: &MouseMove| { &m.X },
                |m: &mut MouseMove| { &mut m.X },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "Y",
                |m: &MouseMove| { &m.Y },
                |m: &mut MouseMove| { &mut m.Y },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MouseMove>(
                "MouseMove",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MouseMove {
        static instance: ::protobuf::rt::LazyV2<MouseMove> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MouseMove::new)
    }
}

impl ::protobuf::Clear for MouseMove {
    fn clear(&mut self) {
        self.X = 0;
        self.Y = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MouseMove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MouseMove {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MouseClick {
    // message fields
    pub button: Button,
    pub event_type: State,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MouseClick {
    fn default() -> &'a MouseClick {
        <MouseClick as ::protobuf::Message>::default_instance()
    }
}

impl MouseClick {
    pub fn new() -> MouseClick {
        ::std::default::Default::default()
    }

    // .master.Button button = 1;


    pub fn get_button(&self) -> Button {
        self.button
    }
    pub fn clear_button(&mut self) {
        self.button = Button::LEFT;
    }

    // Param is passed by value, moved
    pub fn set_button(&mut self, v: Button) {
        self.button = v;
    }

    // .master.State event_type = 2;


    pub fn get_event_type(&self) -> State {
        self.event_type
    }
    pub fn clear_event_type(&mut self) {
        self.event_type = State::PRESSED;
    }

    // Param is passed by value, moved
    pub fn set_event_type(&mut self, v: State) {
        self.event_type = v;
    }
}

impl ::protobuf::Message for MouseClick {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.button, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.button != Button::LEFT {
            my_size += ::protobuf::rt::enum_size(1, self.button);
        }
        if self.event_type != State::PRESSED {
            my_size += ::protobuf::rt::enum_size(2, self.event_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.button != Button::LEFT {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.button))?;
        }
        if self.event_type != State::PRESSED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.event_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MouseClick {
        MouseClick::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Button>>(
                "button",
                |m: &MouseClick| { &m.button },
                |m: &mut MouseClick| { &mut m.button },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                "event_type",
                |m: &MouseClick| { &m.event_type },
                |m: &mut MouseClick| { &mut m.event_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MouseClick>(
                "MouseClick",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MouseClick {
        static instance: ::protobuf::rt::LazyV2<MouseClick> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MouseClick::new)
    }
}

impl ::protobuf::Clear for MouseClick {
    fn clear(&mut self) {
        self.button = Button::LEFT;
        self.event_type = State::PRESSED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MouseClick {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MouseClick {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MouseWheel {
    // message fields
    pub scroll_direction: Direction,
    pub amount: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MouseWheel {
    fn default() -> &'a MouseWheel {
        <MouseWheel as ::protobuf::Message>::default_instance()
    }
}

impl MouseWheel {
    pub fn new() -> MouseWheel {
        ::std::default::Default::default()
    }

    // .master.Direction scroll_direction = 1;


    pub fn get_scroll_direction(&self) -> Direction {
        self.scroll_direction
    }
    pub fn clear_scroll_direction(&mut self) {
        self.scroll_direction = Direction::SCROLL_UP;
    }

    // Param is passed by value, moved
    pub fn set_scroll_direction(&mut self, v: Direction) {
        self.scroll_direction = v;
    }

    // int32 amount = 2;


    pub fn get_amount(&self) -> i32 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i32) {
        self.amount = v;
    }
}

impl ::protobuf::Message for MouseWheel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.scroll_direction, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.scroll_direction != Direction::SCROLL_UP {
            my_size += ::protobuf::rt::enum_size(1, self.scroll_direction);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(2, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.scroll_direction != Direction::SCROLL_UP {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.scroll_direction))?;
        }
        if self.amount != 0 {
            os.write_int32(2, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MouseWheel {
        MouseWheel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Direction>>(
                "scroll_direction",
                |m: &MouseWheel| { &m.scroll_direction },
                |m: &mut MouseWheel| { &mut m.scroll_direction },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "amount",
                |m: &MouseWheel| { &m.amount },
                |m: &mut MouseWheel| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MouseWheel>(
                "MouseWheel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MouseWheel {
        static instance: ::protobuf::rt::LazyV2<MouseWheel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MouseWheel::new)
    }
}

impl ::protobuf::Clear for MouseWheel {
    fn clear(&mut self) {
        self.scroll_direction = Direction::SCROLL_UP;
        self.amount = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MouseWheel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MouseWheel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Request {
    INIT_INFO = 0,
    MOUSE_POSITION = 1,
    CLIPBOARD = 2,
}

impl ::protobuf::ProtobufEnum for Request {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Request> {
        match value {
            0 => ::std::option::Option::Some(Request::INIT_INFO),
            1 => ::std::option::Option::Some(Request::MOUSE_POSITION),
            2 => ::std::option::Option::Some(Request::CLIPBOARD),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Request] = &[
            Request::INIT_INFO,
            Request::MOUSE_POSITION,
            Request::CLIPBOARD,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Request>("Request", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Request {
}

impl ::std::default::Default for Request {
    fn default() -> Self {
        Request::INIT_INFO
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HandshakeResult {
    Success = 0,
    SuccessWarning = 1,
    Rejection = 2,
}

impl ::protobuf::ProtobufEnum for HandshakeResult {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HandshakeResult> {
        match value {
            0 => ::std::option::Option::Some(HandshakeResult::Success),
            1 => ::std::option::Option::Some(HandshakeResult::SuccessWarning),
            2 => ::std::option::Option::Some(HandshakeResult::Rejection),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HandshakeResult] = &[
            HandshakeResult::Success,
            HandshakeResult::SuccessWarning,
            HandshakeResult::Rejection,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HandshakeResult>("HandshakeResult", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HandshakeResult {
}

impl ::std::default::Default for HandshakeResult {
    fn default() -> Self {
        HandshakeResult::Success
    }
}

impl ::protobuf::reflect::ProtobufValue for HandshakeResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Direction {
    SCROLL_UP = 0,
    SCROLL_DOWN = 1,
    SCROLL_LEFT = 2,
    SCROLL_RIGHT = 3,
}

impl ::protobuf::ProtobufEnum for Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Direction> {
        match value {
            0 => ::std::option::Option::Some(Direction::SCROLL_UP),
            1 => ::std::option::Option::Some(Direction::SCROLL_DOWN),
            2 => ::std::option::Option::Some(Direction::SCROLL_LEFT),
            3 => ::std::option::Option::Some(Direction::SCROLL_RIGHT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Direction] = &[
            Direction::SCROLL_UP,
            Direction::SCROLL_DOWN,
            Direction::SCROLL_LEFT,
            Direction::SCROLL_RIGHT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Direction>("Direction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Direction {
}

impl ::std::default::Default for Direction {
    fn default() -> Self {
        Direction::SCROLL_UP
    }
}

impl ::protobuf::reflect::ProtobufValue for Direction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Button {
    LEFT = 0,
    RIGHT = 1,
    MIDDLE = 2,
    XBUTTON1 = 3,
    XBUTTON2 = 4,
}

impl ::protobuf::ProtobufEnum for Button {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Button> {
        match value {
            0 => ::std::option::Option::Some(Button::LEFT),
            1 => ::std::option::Option::Some(Button::RIGHT),
            2 => ::std::option::Option::Some(Button::MIDDLE),
            3 => ::std::option::Option::Some(Button::XBUTTON1),
            4 => ::std::option::Option::Some(Button::XBUTTON2),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Button] = &[
            Button::LEFT,
            Button::RIGHT,
            Button::MIDDLE,
            Button::XBUTTON1,
            Button::XBUTTON2,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Button>("Button", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Button {
}

impl ::std::default::Default for Button {
    fn default() -> Self {
        Button::LEFT
    }
}

impl ::protobuf::reflect::ProtobufValue for Button {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum State {
    PRESSED = 0,
    RELEASED = 1,
}

impl ::protobuf::ProtobufEnum for State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<State> {
        match value {
            0 => ::std::option::Option::Some(State::PRESSED),
            1 => ::std::option::Option::Some(State::RELEASED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [State] = &[
            State::PRESSED,
            State::RELEASED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<State>("State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for State {
}

impl ::std::default::Default for State {
    fn default() -> Self {
        State::PRESSED
    }
}

impl ::protobuf::reflect::ProtobufValue for State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14request_master.proto\x12\x06master\x1a\x0fclipboard.proto\"\xd0\
    \x04\n\rMasterMessage\x12\x12\n\x04rndB\x18\x01\x20\x01(\tR\x04rndB\x12:\
    \n\x0emouse_position\x18\x0b\x20\x01(\x0b2\x11.master.MouseMoveH\0R\rmou\
    sePosition\x12.\n\x08keyboard\x18\x02\x20\x01(\x0b2\x10.master.KeyboardH\
    \0R\x08keyboard\x125\n\x0bmouse_click\x18\x03\x20\x01(\x0b2\x12.master.M\
    ouseClickH\0R\nmouseClick\x125\n\x0bmouse_wheel\x18\x08\x20\x01(\x0b2\
    \x12.master.MouseWheelH\0R\nmouseWheel\x121\n\tclipboard\x18\x04\x20\x01\
    (\x0b2\x11.common.ClipboardH\0R\tclipboard\x12;\n\rstart_session\x18\x05\
    \x20\x01(\x0b2\x14.master.SessionBeginH\0R\x0cstartSession\x125\n\x0bend\
    _session\x18\x06\x20\x01(\x0b2\x12.master.SessionEndH\0R\nendSession\x12\
    +\n\x07request\x18\x07\x20\x01(\x0e2\x0f.master.RequestH\0R\x07request\
    \x12,\n\thandshake\x18\t\x20\x01(\x0b2\x0c.master.EchoH\0R\thandshake\
    \x121\n\theartbeat\x18\n\x20\x01(\x0b2\x11.master.HeartbeatH\0R\theartbe\
    at\x12\x12\n\x04rndE\x18\x0c\x20\x01(\tR\x04rndEB\x08\n\x06action\"Q\n\
    \x04Echo\x12/\n\x06result\x18\x01\x20\x01(\x0e2\x17.master.HandshakeResu\
    ltR\x06result\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"$\n\t\
    Heartbeat\x12\x17\n\x07one_way\x18\x01\x20\x01(\x08R\x06oneWay\">\n\x0cS\
    essionBegin\x12.\n\x13mouse_move_relative\x18\x01\x20\x01(\x08R\x11mouse\
    MoveRelative\"\x0c\n\nSessionEnd\"J\n\x08Keyboard\x12\x10\n\x03key\x18\
    \x01\x20\x01(\rR\x03key\x12,\n\nevent_type\x18\x02\x20\x01(\x0e2\r.maste\
    r.StateR\teventType\"'\n\tMouseMove\x12\x0c\n\x01X\x18\x01\x20\x01(\x05R\
    \x01X\x12\x0c\n\x01Y\x18\x02\x20\x01(\x05R\x01Y\"b\n\nMouseClick\x12&\n\
    \x06button\x18\x01\x20\x01(\x0e2\x0e.master.ButtonR\x06button\x12,\n\nev\
    ent_type\x18\x02\x20\x01(\x0e2\r.master.StateR\teventType\"b\n\nMouseWhe\
    el\x12<\n\x10scroll_direction\x18\x01\x20\x01(\x0e2\x11.master.Direction\
    R\x0fscrollDirection\x12\x16\n\x06amount\x18\x02\x20\x01(\x05R\x06amount\
    *;\n\x07Request\x12\r\n\tINIT_INFO\x10\0\x12\x12\n\x0eMOUSE_POSITION\x10\
    \x01\x12\r\n\tCLIPBOARD\x10\x02*A\n\x0fHandshakeResult\x12\x0b\n\x07Succ\
    ess\x10\0\x12\x12\n\x0eSuccessWarning\x10\x01\x12\r\n\tRejection\x10\x02\
    *N\n\tDirection\x12\r\n\tSCROLL_UP\x10\0\x12\x0f\n\x0bSCROLL_DOWN\x10\
    \x01\x12\x0f\n\x0bSCROLL_LEFT\x10\x02\x12\x10\n\x0cSCROLL_RIGHT\x10\x03*\
    E\n\x06Button\x12\x08\n\x04LEFT\x10\0\x12\t\n\x05RIGHT\x10\x01\x12\n\n\
    \x06MIDDLE\x10\x02\x12\x0c\n\x08XBUTTON1\x10\x03\x12\x0c\n\x08XBUTTON2\
    \x10\x04*\"\n\x05State\x12\x0b\n\x07PRESSED\x10\0\x12\x0c\n\x08RELEASED\
    \x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
